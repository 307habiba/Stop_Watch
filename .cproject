#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#define INC_HOURS (1 << PB1)
#define DEC_HOURS (1 << PB0)
#define INC_MINUTES (1 << PB4)
#define DEC_MINUTES (1 << PB3)
#define INC_SECONDS (1 << PB6)
#define DEC_SECONDS (1 << PB5)

unsigned char hours = 0, minutes = 0, seconds = 0;
unsigned char paused = 0, count_down = 0;

// Function Prototypes
void interrupts();
void timer1_ctc();
void initillization_pins();
void display_time(void);
void display_digit(unsigned char digit, unsigned char number);

// ISR for RESET
ISR(INT0_vect) {
    seconds = minutes = hours = 0;  // Reset time
}

// ISR for PAUSE
ISR(INT1_vect) {
    paused = 1;  // Pause the stopwatch
}

// ISR for RESUME
ISR(INT2_vect) {
    paused = 0;  // Resume the stopwatch
}

// ISR for TIMER1 Compare Match
ISR(TIMER1_COMPA_vect) {
    if (!paused) {
        if (count_down) {
            // Countdown Logic

            if (seconds == 0) {
                if (minutes == 0) {
                    if (hours == 0) {
                        PORTD |= (1 << PD0);  // Buzzer turns on
                    } else {
                        hours--;
                        minutes = 59;
                        seconds = 59;
                    }
                } else {
                    minutes--;
                    seconds = 59;
                }
            } else {
                seconds--;
                if(seconds == 0 && minutes == 0 && hours == 0)
                {
                    PORTD |= (1 << PD0);  // Buzzer turns on
                }
            }
        } else {
            // Increment Logic
            seconds++;
            if (seconds >= 60) {
                seconds = 0;
                minutes++;
                if (minutes >= 60) {
                    minutes = 0;
                    hours++;
                    if (hours >= 24) {
                        hours = 0;  // Reset after 24 hours
                    }
                }
            }
        }
    }
}

// Main function
int main() {
    initillization_pins();
    timer1_ctc();
    interrupts();
    sei();  // Enable global interrupts

    while (1) {
        display_time();
        while (paused == 1) {
            PORTD &= ~(1 << PD0);  // Turn off BUZZER
            display_time();
            if (!(PINB & (1 << PB7))) {  // Enter countdown mode if PB7 is pressed
                count_down ^= 1;
                PORTD ^= (1 << PD5);  // Set countdown mode LED
                PORTD ^= (1 << PD4);  // Turn off normal mode LED
                while (!(PINB & (1 << PB7))){ display_time(); }
            }

            display_time();  // Continuously update the display

            // Hours increment
            if (!(PINB & INC_HOURS)) {
                hours = (hours + 1) % 24;
                while (!(PINB & INC_HOURS)) { display_time(); }
            }

            // Hours decrement
            if (!(PINB & DEC_HOURS)) {
                hours = (hours == 0) ? 23 : hours - 1;
                while (!(PINB & DEC_HOURS)) { display_time(); }
            }

            // Minutes increment
            if (!(PINB & INC_MINUTES)) {
                minutes = (minutes + 1) % 60;
                while (!(PINB & INC_MINUTES)) { display_time(); }
            }

            // Minutes decrement
            if (!(PINB & DEC_MINUTES)) {
                minutes = (minutes == 0) ? 59 : minutes - 1;
                while (!(PINB & DEC_MINUTES)) { display_time(); }
            }

            // Seconds increment
            if (!(PINB & INC_SECONDS)) {
                seconds = (seconds + 1) % 60;
                while (!(PINB & INC_SECONDS)) { display_time(); }
            }

            // Seconds decrement
            if (!(PINB & DEC_SECONDS)) {
                seconds = (seconds == 0) ? 59 : seconds - 1;
                while (!(PINB & DEC_SECONDS)) { display_time(); }
            }

            display_time();  // Continuously update the display
        }
    }
}

// Function to enable interrupts
void interrupts() {
    // INT0: Falling edge, internal pull-up enabled
    MCUCR |= (1 << ISC01);       // Set ISC01, clear ISC00 for falling edge
    PORTD |= (1 << PD2);         // Enable internal pull-up on PD2 (INT0 pin)

    // INT1: Rising edge, external pull-up
    MCUCR |= (1 << ISC11) | (1 << ISC10); // Set ISC11 and ISC10 for rising edge
    // No internal pull-up for INT1 (PD3), external pull-up is assumed

    // INT2: Falling edge, internal pull-up enabled
    MCUCSR &= ~(1 << ISC2);      // Clear ISC2 for falling edge
    PORTB |= (1 << PB2);         // Enable internal pull-up on PB2 (INT2 pin)

    // Enable external interrupts for INT0, INT1, and INT2
    GICR |= (1 << INT0) | (1 << INT1) | (1 << INT2);
}


// Function to set timer1 in CTC mode
void timer1_ctc() {
    OCR1A = 15625;  // Compare value for 1 second (16MHz/1024)
    TIMSK |= (1 << OCIE1A);  // Enable Timer1 Compare A Interrupt
    TCCR1A = (1 << FOC1A);  // Non-PWM mode
    TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);  // CTC mode, prescaler 1024
}

// Function to initialize pins
void initillization_pins() {
    // Configure Input Pins
    DDRD &= ~((1 << PD2) | (1 << PD3)); // PD2, PD3 as input
    DDRB = 0x00; // PORTB as input
    PORTB = 0xFF; // Enable pull-ups on PORTB

    // Configure Output Pins
    DDRD |= (1 << PD0) | (1 << PD4) | (1 << PD5); // PD0 (Buzzer), PD4 (blueLED), PD5 (green LED)
    DDRC |= 0x0F; // PC0-PC3 as output for 7447 BCD to 7-segment decoder
    PORTC &= 0xF0; // Initialize PORTC to zero
    DDRA |= 0x3F; // PORTA as output for 7-segment enable

    // Enable normal increment mode (blue LED on)
    PORTD |= (1 << PD4);
    PORTD &= ~(1 << PD5); // Turn off green LED
}

// Function to display time on 7-segment display
void display_digit(unsigned char digit, unsigned char number) {
    // Turn off all digit positions (PORTA controls which digit is active)
    PORTA = (PORTA & 0xC0) | (1 << number);

    // Set the 7-segment data (by lower 4 bits at PORTC)
    PORTC = (PORTC & 0xF0) | (digit & 0x0F);
}

void display_time(void) {
    // Display seconds
    display_digit(seconds % 10, 5); // First place of seconds
    _delay_ms(5);
    display_digit(seconds / 10, 4);  // Second place of seconds
    _delay_ms(5);

    // Display minutes
    display_digit(minutes % 10, 3);  // First place of minutes
    _delay_ms(5);
    display_digit(minutes / 10, 2);  // Second place of minutes
    _delay_ms(5);

    // Display hours
    display_digit(hours % 10, 1);  // First place of hours
    _delay_ms(5);
    display_digit(hours / 10, 0);  // Second place of hours
    _delay_ms(5);
}

// Additional functions to handle mode toggling and adjustments would be required here
// This would include setting up buttons for incrementing and decrementing hours, minutes, and seconds.
